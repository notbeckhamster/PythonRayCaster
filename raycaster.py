from cmath import pi
import pygame
from sys import exit
import math 
pygame.init()
WIDTH = 1024
HEIGHT = 512
size = (WIDTH, HEIGHT)
screen = pygame.display.set_mode(size)
clock = pygame.time.Clock()
pygame.display.set_caption("RayCaster Game WOOOOOOO")
clock = pygame.time.Clock()
player = pygame.Surface((10,10))
player.fill("Purple")



background = pygame.Surface((1024,512))
background.fill("Grey")
px = 256
py =256
velocity = 5

mapArray = [
    [1,1,1,1,1,1,1,1],
    [1,0,0,0,1,0,0,1],
    [1,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1],
    [1,0,0,0,0,0,0,1],
    [1,0,1,1,0,0,0,1],
    [1,0,1,0,0,0,0,1],
    [1,1,1,1,1,1,1,1]

]

checkArray = [
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,1,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,1,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],

    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],

    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1],

    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0,   1,1,1,1,1,1,1,1,    0,0,0,0,0,0,0,0],


    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],

    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],

    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],

    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0]

    

]
mapX = 8
mapY = 8
mapS = 64
blockSize = HEIGHT / mapX
xMapPos = 0
yMapPos = 0
r=0
mx=0
my=0
mp=0
dof=0
rx=0
ry=0
ra=0
x0=0
y0=0
def drawMap():
    for x in range(0,mapX):
        for y in range(0,mapY):
            if mapArray[x][y]==1:
                block = pygame.Surface((blockSize-1  ,blockSize-1 ))
                block.fill("White")
                screen.blit(block,(blockSize*x,blockSize*y))

            else: 
                block = pygame.Surface((blockSize-1,blockSize-1))
                block.fill("Black")
                screen.blit(block,(blockSize*x,blockSize*y))
ditT =0 
pa=0.001
pdx=0
pdy=0
pi=3.14159265359
DR = 0.0174532925 
def distanceCalc(ax,ay,bx,by,ang):
    return math.sqrt((bx-ax)*(bx-ax)+(by-ay)*(by-ay))
def drawRays():
    global r,mx,my,dof,rx,ry,ra,x0,y0,px,py,pa,disH, hx, hy,disT
    ra=pa-DR*30
    disV= 100000
    disH= 100000
    hx = px
    hy = py
    for i in range(0,120):
        ra += DR/2
        dof=0
        if (ra<0):
            ra += 2*pi
        if (ra>2*pi):
            ra -= 2*pi
        atan = -1/math.tan(ra)
        if (ra>pi):
            ry = math.floor(py/64)*64 -0.00001 
            rx = (py - ry)*atan +px
            y0 = -64
            x0 = -y0*atan
        if (ra<pi):
            ry = math.floor(py/64)*64 +64 
            rx = (py - ry)*atan +px
            y0 = 64
            x0 = -y0*atan
        while (dof<11):
            if (rx<0):
                if (round(ra) == round(pa) and (ra>pi/2 and ra>3*pi/2)):
                    rx = 512 - 64
                    ry = py
                    print("wtf")
                else:
                    rx = 64
            if (rx<0):
                rx = 64
            if (rx>512):
                rx = 512-64
            if (ry <0):
                ry = 64
            if (ry>512):
                ry = 512 -64
            mx = int(rx/64)
            my = int((ry)/64)
            if (mapArray[mx][my]==1):
                hx = rx
                hy = ry
                disH = distanceCalc(px,py,hx,hy,ra)

                break
            else:
                rx += x0
                ry += y0
                dof += 1
        ntan = -math.tan(ra)
        if (ra>pi/2 and ra<3*pi/2):
            rx = math.floor(px/64)*64 -0.00001 
            ry = (px - rx)*ntan +py
            x0 = -64
            y0 = -x0*ntan
        if (ra<pi/2 or ra>3*pi/2):
            rx = math.floor(px/64)*64 +64 
            ry = (px - rx)*ntan +py
            x0 = 64
            y0 = -x0*ntan
    

        while (dof<11):
            if (rx<0):
                rx = 64
            if (rx>512):
                rx = 512-64
            if (ry <0):
                ry = 64
            if (ry>512):
                ry = 512 -64
            mx = int(rx/64)
            my = int((ry)/64)
            
            if (mapArray[mx][my]==1):
                vx = rx
                vy = ry
                disV = distanceCalc(px,py,vx,vy,ra)

                break
            else:
                rx += x0
                ry += y0
                dof += 1
        if (disV<disH): #vertical wall hit
            rx = vx
            ry = vy
            colorLighting = (200,0,0)
            disT = disV
            shade = 1
        if (disH<disV): #horzintal wall hit
            rx=hx
            ry=hy
            colorLighting = (255,0,0)
            disT = disH
            shade = 0.5
        ca = pa - ra
        if (ca<0):
            ca += 2*pi
        if(ca>2*pi):
            ca -= 2*pi
        disT = disT*math.cos(ca)
        lineH = (mapS*320)/disT
        y=0
        ty=0
        tyStep = 32/lineH
        textureColour = None
        line0ff = 160-lineH/2 
        if shade!=1:
            tx = ((rx)/2)%32
            if(ra>pi):
                tx=31-tx
           
        else:
            tx = (ry/2)%32
            if(ra<pi/2 or ra>3*pi/2):
                tx=31-tx
        for y in range(0,int(lineH)):
            textureColour = checkArray[int(ty)+32][int(tx)]
            ty += tyStep
            drawRays3D = pygame.Surface((4,1))
            if (textureColour == 1):
                drawRays3D.fill((0*shade,0*shade,0*shade))
            elif (textureColour == 0):
                drawRays3D.fill((255*shade,255*shade,255*shade))
            screen.blit(drawRays3D,(525+i*4,y+line0ff))

        if (lineH>320):
            lineH = 320
        
        pygame.draw.line(screen,"Pink",(px,py),(rx,ry),1)
        

        
def keyChecker():
    global pa,pdx,pdy,px,py
    keys = pygame.key.get_pressed()
    if keys[pygame.K_RIGHT]:
        pa +=0.1
        if pa > 2*pi:
            pa -= 2*pi
        pdx = math.cos(pa)*5
        pdy = math.sin(pa)*5
    nx = px
    ny = py
    if keys[pygame.K_LEFT]:
        pa -=0.1
        if pa <0:
            pa=2*pi
        pdx = math.cos(pa)*5
        pdy = math.sin(pa)*5
    if (pdx<0):
        x0 = -10
    else:
        x0 = 10
    if (pdy<0):
        y0 = -10
    else:
        y0 = 10
    mx = int((nx+x0)/64)
    my = int((ny+y0)/64)
    if (mapArray[mx][my]==0):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP]:
            px += pdx
            py += pdy
    mx = int((nx-x0)/64)
    my = int((ny-y0)/64)
    if (mapArray[mx][my]==0):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_DOWN]:
            px -= pdx
            py -= pdy 
   
            
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
    keyChecker()
    player_rect = player.get_rect(center = (px, py))
    screen.blit(background, (0,0))
    drawMap()
    
    screen.blit(player, player_rect)
    pygame.draw.line(screen,"Purple",(px, py),(px + pdx*20, py + pdy*20), width = 10)
    drawRays()
    pygame.display.update()

    clock.tick(30)